
#if defined VERTEX_SHADER

#  define VERTEX_OUT out

#elif defined FRAGMENT_SHADER

#  define VERTEX_OUT in

#else

#  error define VERTEX_SHADER or FRAGMENT_SHADER befor makeing a shader object

#endif

///////////////////////////////////////////////////////////////////////////////
//  OPTIONS                                                                  // 
///////////////////////////////////////////////////////////////////////////////

// WITH_DIFFUSE_TEXTURE
// WITH_DIFFUSE_COLOR
// WITH_VERTEX_COLOR
// WITH_NORMAL_MAP
// MAX_LIGHT_COUNT as uint
// MAX_BONE_COUNT  as uint

///////////////////////////////////////////////////////////////////////////////
//  INTERFACE                                                                // 
///////////////////////////////////////////////////////////////////////////////

#define PI 3.149

layout (std140, column_major) uniform Camera_Uniform_Block
{ 
	mat4   u_camera_to_clip_projection;
	mat4x3 u_world_to_camera_transform;
	vec3   u_camera_world_position;
};

uniform mat4x3 u_object_to_world_transform;
uniform float u_gloss;
uniform vec4 u_diffuse_color;
uniform vec4 u_specular_color;
uniform sampler2D u_diffuse_texture;
uniform sampler2D u_normal_map;

#if defined VERTEX_SHADER

in vec3 a_position;
in vec3 a_normal;
in vec3 a_tangent;
in vec2 a_uv;
in vec4 a_bone_indices; // somehow it doesn't like integer uvec4 -.-, why gl why?
in vec4 a_bone_weights;
in vec4 a_color;

#endif

VERTEX_OUT vec3 world_position;
VERTEX_OUT vec3 world_normal;
VERTEX_OUT vec3 world_tangent;
VERTEX_OUT vec2 uv;
VERTEX_OUT vec4 color;
VERTEX_OUT vec3 camera_direction;

#if defined MAX_LIGHT_COUNT

layout (std140) uniform Lighting_Uniform_Block {
	vec4 u_light_global_ambient_color;
	vec4 u_light_global_direction;
	vec4 u_light_global_diffuse_color;
	vec4 u_light_global_specular_color;

	vec4 u_light_colors[MAX_LIGHT_COUNT];
	vec4 u_light_specular_colors[MAX_LIGHT_COUNT];
	vec4 u_light_world_positions_and_attenuations[MAX_LIGHT_COUNT];
	uint u_light_count;
};

uniform float u_shininess;

VERTEX_OUT vec3 light_distances[MAX_LIGHT_COUNT];

#endif

#if defined MAX_BONE_COUNT
uniform mat4x3 u_bone_transforms[MAX_BONE_COUNT];
#endif

#if defined FRAGMENT_SHADER
out vec4 out_color;
#endif

// common functions

vec3 transformed_direction(mat3 world_to_tangent_transform, vec3 direction)
{
#if !(defined WITH_NORMAL_MAP) || ((defined VERTEX_SHADER) == (defined TANGENT_TRANSFORM_PER_FRAGMENT))
	return direction;
#else
	return world_to_tangent_transform * direction;
#endif
}


///////////////////////////////////////////////////////////////////////////////
//  VERTEX_SHADER                                                            // 
///////////////////////////////////////////////////////////////////////////////

#if defined VERTEX_SHADER

void main() {

#if defined MAX_BONE_COUNT

	world_position = vec3(0.0);
	world_normal   = vec3(0.0);
	world_tangent  = vec3(0.0);
	
	for (int i = 0; i < 4; ++i)
	{
		uint index = uint(a_bone_indices[i]);
		world_position += (u_bone_transforms[index] * vec4(a_position, 1.0)) * a_bone_weights[i];
		world_normal   += (u_bone_transforms[index] * vec4(a_normal,   0.0)) * a_bone_weights[i];
		world_tangent  += (u_bone_transforms[index] * vec4(a_tangent,  0.0)) * a_bone_weights[i];	
	}

#else

	world_position = a_position;
	world_normal   = a_normal;
	world_tangent  = a_tangent;

#endif

	world_position = u_object_to_world_transform * vec4(world_position, 1.0);
	world_normal   = u_object_to_world_transform * vec4(world_normal,   0.0);
	world_tangent  = u_object_to_world_transform * vec4(world_tangent,  0.0);

	mat3 world_to_tangent_transform = transpose(mat3(
        normalize(world_tangent),
        normalize(cross(world_normal, world_tangent)),
        normalize(world_normal)
    ));

#if defined MAX_LIGHT_COUNT
	for (uint light_index = uint(0); light_index < u_light_count; ++light_index)
	{
		light_distances[light_index] = transformed_direction(world_to_tangent_transform, u_light_world_positions_and_attenuations[light_index].xyz - world_position);
	}
#endif

	camera_direction = transformed_direction(world_to_tangent_transform, u_camera_world_position - world_position);

	uv = a_uv;

#if defined WITH_VERTEX_COLOR
	color = a_color;
#endif

	gl_Position = u_camera_to_clip_projection * vec4(u_world_to_camera_transform * vec4(world_position, 1.0), 1.0);
}

#endif


///////////////////////////////////////////////////////////////////////////////
//  FRAGMENT_SHADER                                                          // 
///////////////////////////////////////////////////////////////////////////////

#if defined FRAGMENT_SHADER

float get_attenuation(vec3 light_distance, float light_k) {
	return 1.0 / (1.0 + light_k * dot(light_distance, light_distance));
}

float get_specular_intensity(
	vec3 normal,
	vec3 light_dir,
	vec3 camera_dir,
	float shininess,
	float attenuation
) {
	vec3 half_reflection = normalize(light_dir + camera_dir);
	return pow(max(dot(normal, half_reflection), 0.0), shininess) * attenuation;
}

float get_diffuse_intensity(
	vec3 normal,
	vec3 light_dir,
	float specular_intensity, 
	float attenuation
) {
	float intensity = max(dot(normal, light_dir), 0.0);
	return (1 - specular_intensity) * intensity * attenuation;
}	

vec4 frasnel_schlick(vec4 specular_color, vec3 light_direction, vec3 half_direction) {
    return specular_color + (1 - specular_color) * pow(1 - max(0, dot(light_direction, half_direction)), 5);
}

float normal_distribution(vec3 normal, vec3 half_direction, float gloss) {
    float specular_power = pow(8192, gloss);
    
    return (specular_power + 2) * pow(max(0, dot(normal, half_direction)), specular_power) / (2 * PI);
}

float visibility(vec3 light_direction, vec3 half_direction) {
    return 1 / pow(max(0, dot(light_direction, half_direction)), 2);
}

// bidirectional reflectance distribution
vec4 microfacet_BRDF(vec3 normal, vec3 light_direction, vec3 half_direction, vec4 specular_color, float gloss)
{
    return frasnel_schlick(specular_color, light_direction, half_direction) * visibility(light_direction, half_direction) * normal_distribution(normal, half_direction, gloss) * 0.25f;
}

vec4 microfacet_BRDF_point_light(vec3 normal, vec3 light_direction, vec3 half_direction, vec4 specular_color, float gloss, vec4 light_color)
{
    return PI * microfacet_BRDF(normal, light_direction, half_direction, specular_color, gloss) * (light_color * max(0, dot(normal, light_direction)));
}

void main()
{
	vec4 diffuse_color  = vec4(0);
	vec4 specular_color = vec4(0);

#if defined WITH_NORMAL_MAP
	vec3 normal = normalize(texture(u_normal_map, uv).xyz * 2  - 1);
#else
	vec3 normal = normalize(world_normal);
#endif

	mat3 world_to_tangent_transform = transpose(mat3(
        normalize(world_tangent),
        normalize(cross(world_normal, world_tangent)),
        normalize(world_normal)
    ));

	vec3 camera_dir = normalize(transformed_direction(world_to_tangent_transform, camera_direction));

//	out_color = vec4(0);

#if defined MAX_LIGHT_COUNT
	{
		diffuse_color += u_light_global_ambient_color;
	
		vec4 light_color = u_light_global_diffuse_color * max(0, dot(normal, -u_light_global_direction.xyz));
		vec4 spec = microfacet_BRDF(normal, -u_light_global_direction.xyz, normalize(camera_dir - u_light_global_direction.xyz), u_specular_color, u_gloss);

		specular_color += PI * spec * light_color;
		diffuse_color  += (1 - spec) * light_color;
	}

	// TODO,MAYBE: optional per vertex lighting - tafil, 21.07.2018
	for (uint light_index = uint(0); light_index < u_light_count; ++light_index)
	{
		vec3 light_distance = light_distances[light_index];
		vec3 light_direction = normalize(transformed_direction(world_to_tangent_transform, light_distance));
		vec3 half_direction = normalize(camera_dir + light_direction);

		vec4 light_color = u_light_colors[light_index] / (1 + 0.005 * dot(light_distance, light_distance));
		light_color = (light_color * max(0, dot(normal, light_direction)));

		vec4 spec = microfacet_BRDF(normal, light_direction, half_direction, u_specular_color, u_gloss);

		specular_color += PI * spec * light_color; //microfacet_BRDF_point_light(normal, light_direction, half_direction, u_specular_color, u_gloss, light_color);
		diffuse_color  += (1 - spec) * light_color;

#if 0
		float attenuation = get_attenuation(light_distance, u_light_world_positions_and_attenuations[light_index].w);
		float spec = get_specular_intensity(normal, light_dir, camera_dir, u_shininess, attenuation);
		float diff = get_diffuse_intensity(normal,  light_dir, spec, attenuation);

		diffuse_color  += u_light_diffuse_colors[light_index]  * diff;
		specular_color += u_light_specular_colors[light_index] * spec;
#endif
	}

#else

	diffuse_color = vec4(1);

#endif

#if defined WITH_DIFFUSE_TEXTURE
	diffuse_color *= texture(u_diffuse_texture, uv); 
#endif

#if defined WITH_DIFFUSE_COLOR
	diffuse_color *= u_diffuse_color;
#endif

#if defined WITH_VERTEX_COLOR
	diffuse_color *= color;
#endif

	out_color = diffuse_color + specular_color;

	// for debuging
	//out_color = vec4(normal * 0.5 + 0.5, 1.0);
	//out_color = vec4(normalize(light_directions[0]) * 0.5 + 0.5, 1.0);
	//out_color = vec4(normalize(camera_direction) * 0.5 + 0.5, 1.0);
}

#endif
